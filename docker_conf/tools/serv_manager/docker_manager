#!/bin/bash
# Should be runned by systemd with network dependency and fail to mail

LOCKFILE="/var/run/$(basename "$0").lock"
INTERVAL="15m"
MAX_FAIL_SCORE=2
LOCAL_DIR=$(dirname "$(readlink -f "$0")")
USAGE="USAGE: $(basename "$0") start|stop|reload conf_file."

declare -A CONTAINERS_FAIL

safe_exit() {
    echo "$1"
    rm -f "$LOCKFILE"
    exit "$2"
}

inspect() {
    docker inspect -f '{{.State.Status}}' $1 | grep -P "^running$" &>/dev/null && docker inspect -f '{{.State.Health.Status}}' $1 | grep -P "(^healthy$)" &>/dev/null
}

send_mail() {
    local message=`journalctl -eb CONTAINER_NAME=$1`
    echo -e "Subject:$1 Failure $2\n$message" | msmtp -a main $FAIL_MAIL
    if [ $? -ne 0 ]; then
        echo "Mail to $FAIL_MAIL failed, relaying on backup."
        echo -e "Subject:$1 Failure $2\n$message" | msmtp -a backup $FAIL_MAIL
    else
        echo "Mail sended to $FAIL_MAIL."
    fi
}

refresh_score() {
    # $1 cont name / $2 score
    if inspect $1; then
        echo 0
    elif [ $2 -lt $MAX_FAIL_SCORE ] ; then
        echo $(( $2 + 1 ))
    else
        echo $2
    fi
}

kill_handler() {
    safe_exit "KILL catched, exiting." 0
}

terminator() {
    kill -9 $1 1>/dev/null
    [ -f "$LOCKFILE" ] && ps -p $(cat "$LOCKFILE") > /dev/null && echo "Can't kill $1, exiting." && exit 1
}

error_handler() {
    # $1 cont name / $2 score
    echo "$1 failed ($2)."
    send_mail $1 $2
    cd $LOCAL_DIR && cd ../..
    docker stop $1 &>/dev/null && echo "$1 stopped."
    $1/docker-run.sh default
}

build_container_fails() {
    for cont in $CONTAINERS; do
        CONTAINERS_FAIL["$cont"]=0
    done
}

check_loop() {
    while true; do
        sleep $INTERVAL
        for cont in $CONTAINERS; do
            local TMP=`refresh_score "$cont" ${CONTAINERS_FAIL[$cont]}`
            [ $TMP -gt ${CONTAINERS_FAIL[$cont]} ] && error_handler "$cont" $TMP
            CONTAINERS_FAIL[$cont]=$TMP
        done
    done
}

docker_start() {
    cd $LOCAL_DIR && cd ../..
    for cont in $CONTAINERS; do
        $cont/docker-run.sh default
    done
}

docker_stop() {
    for cont in $CONTAINERS; do
        docker stop $cont 1>/dev/null && echo "$cont stopped."
    done
}

start() {
    docker_start
    check_loop
}

stop() {
    docker_stop
}

reload() {
    stop
    start
}

boot_check() {
    [ `id -u` -ne 0 ] && echo "Must be run as root." && exit 1
    if ! msmtp --version &>/dev/null ; then
        echo "msmtp not found, exiting."
        exit 1
    fi
    [ "$#" -ne 2 ] && echo "$USAGE" && exit 1
    [ -f "$LOCKFILE" ] && ps -p $(cat "$LOCKFILE") > /dev/null && echo "$(basename "$0") is already running, restarting." && terminator $(cat "$LOCKFILE")
    echo $$ > "$LOCKFILE"
}

main() {
    cd $LOCAL_DIR
    source $2
    build_container_fails
    case $1 in
        start)  start;;
        reload) reload;;
        stop) stop;;
        * ) echo "$USAGE";;
    esac
}

trap term_handler SIGKILL
boot_check $@
main $@
safe_exit "$(basename "$0") exiting." 0
