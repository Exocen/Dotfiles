#!/usr/bin/python3
# Needed : mutagen, youtube_dl
import mutagen
import youtube_dl

import re
import csv
import subprocess
import logging
from shlex import quote
from random import seed, randint
from time import sleep
from mutagen.easyid3 import EasyID3
from os import path, listdir, rename
from tempfile import TemporaryDirectory
from urllib.request import urlopen

logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger('YDL')
tmp_dir = "/var/tmp"
audio_format = "mp3"
video_format = "mkv"
post_dl_cooldown = 15
loop_cooldown = 600
docker_data_path = "/ydl/"
params_location = path.join(docker_data_path, "ydl_param.csv")
DEFAULT_USAGE = f"multiline csv file usage -> output_dir (can use host:/), playlist_id, audio_transform(true/false) to {params_location}"
safe_fail_count = 2
retry_counter_max = 2


class CmdException(Exception):
    pass


class YDL_Logger:
    def error(msg):
        log.error(msg)

    def warning(msg):
        log.debug(msg)

    def debug(msg):
        log.debug(msg)


class Main:

    def __init__(self):
        self.playlist_id = None
        self.playlist_path_location = None
        self.params_list = self.get_param_list()
        self.last_video_count = {param[1]: 0 for param in self.params_list}
        log.debug(f'Using new parameters -> {self.params_list}')
        self.retry_counter = 0
        self.loop = True
        self.last_dl_file = None
        self.audio_transform = None

    def get_title_list(self, file_path):
        log.debug(f"getting titles from {file_path}")
        if path.exists(file_path):
            with open(file_path, newline="") as f:
                reader = csv.reader(f)
                return list(reader)[0]
        else:
            return []

    def write_title_list(self, file_path, title_list):
        log.info(f"writing titles to {file_path}")
        with open(file_path, "w", newline="") as csv_file:
            write = csv.writer(csv_file)
            write.writerow(title_list)

    def get_param_list(self):
        rows = []
        if path.exists(params_location):
            with open(params_location, 'r') as csvfile:
                csvreader = csv.reader(csvfile)
                # extracting each data row one by one
                for row in csvreader:
                    rows.append(row)
                return rows
        raise Exception(DEFAULT_USAGE)

    def get_filename_without_ext(self, filename):
        pre, ext = path.splitext(filename)
        if ext:
            return self.get_filename_without_ext(pre)
        else:
            return pre

    def file_hook(self, d):
        if d['status'] == 'finished':
            filename = self.get_filename_without_ext(path.basename(d['filename']))
            if self.audio_transform:
                self.last_dl_file = filename + '.' + audio_format
            else:
                self.last_dl_file = filename + '.' + video_format
            log.debug(self.last_dl_file)

    def gen_ydl_options(self, tmpdirname):
        opts = {
            "quiet": True,
            "logger": YDL_Logger,
            "progress_hooks": [self.file_hook],
            "outtmpl": tmpdirname + "/%(title)s.",
        }
        if self.audio_transform:
            opts.update({"postprocessors": [{"key": "FFmpegExtractAudio", "preferredcodec": audio_format, }],
                         "extractaudio": True,
                         "format": "bestaudio/best", })
        else:
            opts.update({"recode-video": video_format})
        return opts

    def connection_error(self, dl_error):
        self.retry_counter = self.retry_counter + 1
        if self.retry_counter <= safe_fail_count:
            # Shit happen
            log.debug(dl_error)
            Main.let_sleep(loop_cooldown, True)
        elif self.retry_counter < retry_counter_max:
            log.debug(dl_error)
            log.info(f"Vpn reloading, {retry_counter_max - self.retry_counter} tries left")
            Main.let_sleep(loop_cooldown)
        else:
            raise dl_error

    @staticmethod
    def run_process(cmd):
        s = subprocess.run(cmd, capture_output=True, text=True)
        if s.returncode != 0:
            raise CmdException(s.stderr)
        if s.stdout:
            log.debug(s.stdout)
        return s

    def dl_list(self, audio_data, ydl_opts):
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download([audio_data.pid])

    def extract_info(self):
        with youtube_dl.YoutubeDL({"logger": YDL_Logger, "quiet": True}) as ydl:
            return ydl.extract_info(self.playlist_id, download=False)

    def tag_and_copy(self, audio_data, tmpdirname):
        dest_path = path.join(self.playlist_path_location, audio_data.filename)
        # youtube_dl hook doesn't give the right filename post processing
        filenames = listdir(tmpdirname)
        log.debug(f'files : {filenames}')
        if len(filenames) != 1:
            raise Exception(f"Too many files: {filenames}")
        filepath = path.join(tmpdirname, filenames[0])
        # if artist and audio -> use id3 tags
        if self.audio_transform and audio_data.artist is not None:
            try:
                meta = EasyID3(filepath)
            except mutagen.id3.ID3NoHeaderError:
                meta = mutagen.File(filepath, easy=True)
                meta["title"] = audio_data.tagtitle
                meta["artist"] = audio_data.artist
                meta.save()

        rename(f"{quote(filepath)}, f"{quote(dest_path)}")
        log.info(f'Running {cmd}')
        Main.run_process(cmd)

    def get_video_count(self):
        try:
            reg_pattern = "playlistBylineRenderer.:{.text.:{.runs.:.{.text.:.(\d*?)\D*?}"
            url = "https://www.youtube.com/playlist?list=" + self.playlist_id
            found_str = re.findall(reg_pattern, urlopen(url).read().decode("utf-8"))
            video_count = found_str[0] if len(found_str) > 0 and len(found_str[0]) != 0 else 0
            log.debug(f"{video_count} Videos found in {self.playlist_id} (previous: {self.last_video_count[self.playlist_id]})")
            return video_count
        # check not mandatory, any error : process continue
        except Exception as dl_error:
            self.connection_error(dl_error)
            return 0

    def downloader(self):

        # Check playlist len
        video_count = self.get_video_count()
        if video_count == self.last_video_count[self.playlist_id]:
            return

        # Dl infos only
        try:
            infos = self.extract_info()
        except youtube_dl.utils.DownloadError as dl_error:
            self.connection_error(dl_error)
            self.downloader()
            return
        playlist_title = infos["title"]
        file_list_path = path.join(docker_data_path, playlist_title + ".csv")

        # Check existing
        audio_data_list = []

        for info in infos["entries"]:
            audio_data_list.append(Audio_data(info["title"], info["id"]))

        existing_title_list = self.get_title_list(file_list_path)

        done_list = list(filter(lambda a: a in [b.title for b in audio_data_list], existing_title_list))
        audio_data_list = list(
            filter(lambda a: a.title not in existing_title_list,
                   audio_data_list))

        # Dl and tag
        if audio_data_list:
            try:
                for audio_data in audio_data_list:
                    # new tmp dir every dl
                    with TemporaryDirectory(dir=tmp_dir) as tmpdirname:
                        log.info("Downloading: " + audio_data.title)
                        self.dl_list(audio_data, self.gen_ydl_options(tmpdirname))
                        audio_data.filename = self.last_dl_file
                        log.debug("Tag and copy: " + audio_data.title)
                        self.tag_and_copy(audio_data, tmpdirname)
                        done_list.append(audio_data.title)
                        self.write_title_list(file_list_path, done_list)
                        log.info("Downloaded: " + audio_data.title)
                        Main.let_sleep(post_dl_cooldown, True)

            except (youtube_dl.utils.DownloadError, CmdException) as dl_error:
                self.connection_error(dl_error)
                self.downloader()
                return

        # Keep infos for next loop
        elif (len(existing_title_list) != len(done_list)):
            self.write_title_list(file_list_path, done_list)
        self.retry_counter = 0
        self.last_video_count[self.playlist_id] = video_count

    def set_params(self, params):
        self.playlist_path_location = params[0]
        self.playlist_id = params[1]
        if params[2].lower() == 'true':
            self.audio_transform = True
        elif params[2].lower() == 'false':
            self.audio_transform = False
        else:
            raise Exception(DEFAULT_USAGE)

    @staticmethod
    def let_sleep(sleep_time, is_rnd=False):
        if (is_rnd):
            sleep_time = sleep_time + randint(0, sleep_time)
        log.debug("Sleeping for " + str(sleep_time) + " second(s)")
        sleep(sleep_time)

    @staticmethod
    def check_ffmpeg():
        try:
            cmd = ['/usr/bin/ffmpeg', '-version', '1>/dev/null']
            Main.run_process(cmd)
        except Exception as check_error:
            log.error(f'ffmpeg error: {check_error}')
            exit(1)

    def run(self):
        log.info("YDL Starting...")
        Main.check_ffmpeg()
        seed()
        while (self.loop):
            for params in self.params_list:
                self.set_params(params)
                self.downloader()
            Main.let_sleep(loop_cooldown, True)


class Audio_data:

    def __init__(self, title, pid):
        self.title = title
        self.pid = pid
        self.filename = None
        parsed_title = re.findall(r"(.*?)\s*(-|//)\s*(.*)", title)
        if len(parsed_title) > 0 and len(parsed_title[0]) == 3:
            self.artist = parsed_title[0][0]
            self.tagtitle = parsed_title[0][2]
        else:
            self.artist = None
            self.tagtitle = None


if __name__ == "__main__":
    Main().run()
